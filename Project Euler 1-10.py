# 1) If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

Multiples = []
for i in range(1000):
    if i % 3 == 0 or i % 5 == 0:
        Multiples.append(i)
print('1)', sum(Multiples))


# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms.
#   By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#   By considering the terms in the Fibonacci sequence whose values do not exceed four million,
#   find the sum of the even-valued terms.

Fib = [1, 2]
FibEven = [2]
FibOdd = [1]
for i in range(30):
    X = Fib[i + 1]
    Y = Fib[i]
    Z = X + Y
    Fib.append(Z)
    if Z % 2 == 0:
        FibEven.append(Z)
    else:
        FibOdd.append(Z)
print('2)', sum(FibEven))


# 3) The prime factors of 13195 are 5, 7, 13 and 29.
#   What is the largest prime factor of the number 600851475143 ?

# Won't run, taking too long. No way of checking if correct

primes = [2]
primefactors = []
Z = 600851475143
for f in range(2, 300425737573):
    if Z % f == 0:
        x = sum([f % p > 0 for p in primes])
        if x == len(primes):
            primes.append(f)
            primefactors.append(f)

print(max(primefactors))

# 4) A palindromic number reads the same both ways. The largest palindrome made from the product of
# two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

Palindrome = []
for i in range(100, 1000):
    for g in range(100, 1000):
        X = i * g
        if len(str(X)) == 6:
            Z = [int(a) for a in str(X)]
            if len(Z) == 6:
                if Z[0] == Z[5] and Z[1] == Z[4] and Z[2] == Z[3]:
                    Palindrome.append(X)
print('4)', max(Palindrome))


# 5) 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

# Shortened the range when the answer was found to allow quicker future runs

Divisible = []
for i in range(232792559, 232792562):
    if i % 2520 == 0:
        x = 0
        for g in range(11, 21):
            if i % g == 0:
                x = x + 1
        if x == 10:
            Divisible.append(i)
print('5)', min(Divisible))


# 6) Find the difference between the sum of the squares of the first one hundred natural numbers
#   and the square of the sum.

Sum = 0
SumOfSquares = 0
for i in range(101):
    Sum = Sum + i
    SumOfSquares = SumOfSquares + (i*i)
SquareOfSum = Sum * Sum
Difference = SquareOfSum - SumOfSquares
print('6)', Difference)


# 7) By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

primes = [2]
for f in range(3, 150000):
    x = sum([f % p > 0 for p in primes])
    if x == len(primes):
        primes.append(f)
print('7)', primes[10000])


# 8) The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
#   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
#   What is the value of this product?

x = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

Digits = [int(a) for a in str(x)]
Multiples = []
for d in range(len(Digits)-13):
    num = 1
    for f in range(13):
        num = num * Digits[f+d]
    Multiples.append(num)
print('8)', max(Multiples))


# 9) A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2
# There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.

for a in range(1000):
    for b in range(1000):
        for c in range(1000):
            if a < b < c and a*a + b*b == c*c and a + b + c == 1000:
                z = a*b*c
                print('9)', z)

# 10)The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.

primes = [2]
for f in range(3, 2000000):
    x = sum([f % p > 0 for p in primes])
    if x == len(primes):
        primes.append(f)
print('7)', sum(primes))
